name: Release Pipeline (NuGet)

on:
  push:
    tags:
      - 'v*.*.*'

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    
    steps:
      - name: Extract version from tag
        id: extract
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          
          # Validate semver format
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: v0.1.0 (semver)"
            exit 1
          fi
          echo "Valid semver format"

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: validate-tag
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build library
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal

  pack:
    name: Create NuGet Package
    runs-on: ubuntu-latest
    needs: [validate-tag, build-and-test]
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build library
        run: dotnet build --configuration Release --no-restore

      - name: Pack NuGet package
        run: |
          VERSION=${{ needs.validate-tag.outputs.version }}
          echo "Packing version: $VERSION"
          dotnet pack --configuration Release --no-build --output ./artifacts \
            /p:PackageVersion=$VERSION \
            /p:AssemblyVersion=$VERSION \
            /p:FileVersion=$VERSION \
            /p:InformationalVersion=$VERSION

      - name: Validate package contents
        run: |
          echo "Package contents:"
          ls -lh ./artifacts/
          
          # Check if package was created
          if [ ! -f ./artifacts/ConsolePrism.${{ needs.validate-tag.outputs.version }}.nupkg ]; then
            echo "Package file not found!"
            exit 1
          fi
          echo "Package created successfully"

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package-${{ needs.validate-tag.outputs.version }}
          path: ./artifacts/*.nupkg
          retention-days: 90
          if-no-files-found: error

  publish:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [validate-tag, pack]
    permissions:
      contents: write
      packages: write
    environment:
      name: nuget-production
      url: https://www.nuget.org/packages/ConsolePrism/${{ needs.validate-tag.outputs.version }}
    
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-${{ needs.validate-tag.outputs.version }}
          path: ./artifacts

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Publish to NuGet.org
        run: |
          echo "Publishing ConsolePrism v${{ needs.validate-tag.outputs.version }} to NuGet.org"
          dotnet nuget push ./artifacts/*.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*.nupkg
          generate_release_notes: true
          draft: false
          prerelease: ${{ !startsWith(needs.validate-tag.outputs.version, '1.') }}
          body: |
            ## ConsolePrism v${{ needs.validate-tag.outputs.version }}
            
            ### Installation
            ```bash
            dotnet add package ConsolePrism --version ${{ needs.validate-tag.outputs.version }}
            ```
            
            ### NuGet Package
            https://www.nuget.org/packages/ConsolePrism/${{ needs.validate-tag.outputs.version }}